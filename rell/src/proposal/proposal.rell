import app;
import account;

entity proposal {
	key id: name;
	title: text;
	category: text;
	author: account.eth_account;
	startTimestamp: integer;
	endTimestamp: integer;
	description: text;
	index category, endTimestamp;
	index author, endTimestamp;
}

operation create_proposal (account_id: byte_array, auth_descriptor_id: byte_array, 
	appName: name, title: text, description: text, options: list<text>
) {
	require(options.size() >= 2 and options.size() <= 4, "Only 2-4 options is allowed");
	require(options.size() == set<text>(options).size(), "Duplicate options not allowed");

	val user = account.retrieve_verified_user(account_id, auth_descriptor_id);
	val is_core_user = account._is_core_user(user);
	
	require(is_core_user or (
		options.size() == 2 and 
		options[0] == "Approve" and 
		options[1] == "Reject"
	), "Only core user is allowed to create custom options");

	val numeric_id = app.get_and_increment_id(appName);
	val id = 'HGET-' + numeric_id;
	
	var category = 'Community';
	if (is_core_user) {
		category = 'Core';
	}
	
	val proposal = create proposal (
		id,
		title, 
		category,
		author = user,
		startTimestamp = op_context.last_block_time,
		endTimestamp = op_context.last_block_time + days_in_millis(3),
		description
	);
	val poll = create poll (proposal);

	for (option in options) {
		create poll_option ( poll, option );
	}
}

operation delete_proposal (account_id: byte_array, auth_descriptor_id: byte_array, id: name) {
	val user = account.retrieve_verified_user(account_id, auth_descriptor_id);
	account.require_core_user(user);
	
	val proposal = proposal @ { .id == id };	
	val poll = poll @ { proposal };

	delete poll_option @* { poll };
	delete poll;
	delete proposal;
}

query get_all_proposals () {
	return proposal @* {} (
		.id,
		.title,
		.category,
		author = .author.address,
		.startTimestamp,
		@sort_desc .endTimestamp
	);
}

query get_proposals_by_eth_addr_after_timestamp (eth_addr: text, timestamp: integer) {
	return proposal @* { .author.address == eth_addr, .endTimestamp > timestamp } (
		.id,
		.title,
		.category,
		author = .author.address,
		.startTimestamp,
		@sort_desc .endTimestamp
	);
}

query get_proposals_by_category (category: name) {
	return proposal @* { .category == category } (
		.id,
		.title,
		.category,
		author = .author.address,
		.startTimestamp,
		@sort_desc .endTimestamp
	);
}

query get_proposals_ending_after_timestamp (timestamp: integer) {
	return proposal @* { .endTimestamp > timestamp } (
		.id,
		.title,
		.category,
		author = .author.address,
		.startTimestamp,
		@sort_desc .endTimestamp
	);
}

query get_proposals_ended_before_timestamp (timestamp: integer) {
	return proposal @* { .endTimestamp < timestamp } (
		.id,
		.title,
		.category,
		author = .author.address,
		.startTimestamp,
		@sort_desc .endTimestamp
	);
}

query get_proposals_by_category_ending_after_timestamp (category: name, timestamp: integer) {
	return proposal @* { .category == category, .endTimestamp > timestamp } (
		.id,
		.title,
		.category,
		author = .author.address,
		.startTimestamp,
		@sort_desc .endTimestamp
	);
}

query get_proposals_by_category_ended_before_timestamp (category: name, timestamp: integer) {
	return proposal @* { .category == category, .endTimestamp < timestamp } (
		.id,
		.title,
		.category,
		author = .author.address,
		.startTimestamp,
		@sort_desc .endTimestamp
	);
}

query get_full_proposal (id: name) {
	return proposal @ { .id == id } (
		.id,
		.title,
		.category,
		author = .author.address,
		.startTimestamp,
		.endTimestamp,
		.description
	);
}

function days_in_millis (days: integer): integer {
	return 1000 * 60 * 60 * 24 * days;
}