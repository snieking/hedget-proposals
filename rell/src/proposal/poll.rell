import account;

entity poll {
	key proposal;
}

entity poll_option {
	key poll, text;
}

entity poll_vote {
	key poll, account.eth_account;
	index poll, poll_option;
	amount: integer;
}

struct poll_option_votes {
	text;
	votes: integer;
}

operation vote_for_option_in_poll (account_id: byte_array, auth_descriptor_id: byte_array, id: name, option: text) {
	val user = account.retrieve_verified_user(account_id, auth_descriptor_id);
	val the_poll = poll @{ .proposal.id == id };
	require(the_poll.proposal.endTimestamp > op_context.last_block_time, "Proposal already completed");
	
	create poll_vote (the_poll, user, poll_option @{ the_poll, .text == option }, account.eth_account_state @ { user } .staked_amount);
}

query get_poll_proposal_options (id: name) {
	var the_poll = poll @{ .proposal.id == id };
	var votes = poll_vote @* { .poll == the_poll };
	
	var vote_map = map<name, integer>();
	for (po in poll_option @* { the_poll }) vote_map.put(po.text, 0);
	
	for (vote in votes) {
		var option = vote.poll_option.text;
		vote_map[option] += vote.amount;
	}
	
	var results = list<poll_option_votes>();
	for (option in vote_map.keys()) {
		results.add(poll_option_votes(option, vote_map.get(option)));
	}
	
	return results;
}

query get_vote_details_of_specific_option (id: name, option: text) {
	val poll = poll @ { .proposal.id == id };
	return poll_vote @* { poll, poll_option @ { poll, .text == option }} (
		address = .eth_account.address,
		amount = .amount	
	);
}

query get_poll_vote (id: name, account_id: byte_array) {
	return poll_vote @? { .poll.proposal.id == id, account.eth_account @ { .account.id == account_id } } ( .poll_option.text );
}

query get_poll_vote_by_eth_addr (id: name, eth_addr: text) {
	return poll_vote @? { .poll.proposal.id == id, account.eth_account @ { .address == eth_addr } } ( .poll_option.text );
}

query get_poll_participations_by_eth_addr (eth_addr: text) {
	return poll_vote @* { account.eth_account @ { .address == eth_addr } } ( 
		id = .poll.proposal.id, 
		title = .poll.proposal.title, 
		option = .poll_option.text, 
		amount = .amount,
		endTimestamp = .poll.proposal.endTimestamp
	);
}